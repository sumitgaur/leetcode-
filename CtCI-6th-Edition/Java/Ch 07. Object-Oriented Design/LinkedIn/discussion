Requirements
- The user should be able to search based on ID, name (should be able to extend)
- The user can send/remove the connection
- The user is able to follow someone without connecting
- The user should be able to see what the connection is.

userA->userB->userC.  just 2nd connection  front of my front

userA-


Class, interface, methods

User journey
user search a profile -> open that profile -> (follow or unfollow) ->

User

Entities
- User
- Post
- Profile
-

Singleton thread-safe

UserManager -  responsible user related stuff
SearchManager - responsible for searching related stuff
ConnectionManager - responsible for connections-related stuff like follow(A,B) findConnectionLevel(A,B)=2

GraphDb
GraphDbImpl
graph db or data structure


A->B
Connections
{
"A"->[B]
"B"->[C] // Lock on the key
}

Follow
{
"A": []

}


not possible (rare)
B->A
B->C

B->A
C->A

synchronised put(k,v)
{

}

aquire_thelock(seat_id)
optimistic ->



-----------------------
A->B->C is 2 level

FindPath(userId1,userId2)
{
if userId==userId2:
return 0

for c in connection[userId1]
{
path_len=FindPath(c,userId2)+1
}
return path_len
}













